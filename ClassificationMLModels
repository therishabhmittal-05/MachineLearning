{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34877,"sourceType":"datasetVersion","datasetId":27352}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-24T09:48:15.578835Z","iopub.execute_input":"2024-07-24T09:48:15.579855Z","iopub.status.idle":"2024-07-24T09:48:17.057541Z","shell.execute_reply.started":"2024-07-24T09:48:15.579804Z","shell.execute_reply":"2024-07-24T09:48:17.056052Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/mnist-in-csv/mnist_test.csv\n/kaggle/input/mnist-in-csv/mnist_train.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:48:19.438806Z","iopub.execute_input":"2024-07-24T09:48:19.440386Z","iopub.status.idle":"2024-07-24T09:48:22.204449Z","shell.execute_reply.started":"2024-07-24T09:48:19.440318Z","shell.execute_reply":"2024-07-24T09:48:22.202470Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"mnist = pd.read_csv('/kaggle/input/mnist-in-csv/mnist_train.csv')\nX = mnist.iloc[:, 1:-1]\ny = mnist.iloc[:, 0]\nXtrain, Xtest, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\nX_train = Xtrain/255\nX_test = Xtest/255\n","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:48:23.747894Z","iopub.execute_input":"2024-07-24T09:48:23.748424Z","iopub.status.idle":"2024-07-24T09:48:30.603502Z","shell.execute_reply.started":"2024-07-24T09:48:23.748386Z","shell.execute_reply":"2024-07-24T09:48:30.602160Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"classifier =  LogisticRegression(max_iter=50)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\ncr = classification_report(y_test, y_pred)\n\n# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n\nprint('LogisticRegression')\nprint(accuracy)\nprint('Confusion Matrix:')\nprint(cm)\nprint('Classification Report:')\nprint(cr)\nprint('-' * 60)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:48:32.481585Z","iopub.execute_input":"2024-07-24T09:48:32.482153Z","iopub.status.idle":"2024-07-24T09:48:39.730530Z","shell.execute_reply.started":"2024-07-24T09:48:32.482104Z","shell.execute_reply":"2024-07-24T09:48:39.729252Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"LogisticRegression\n0.9211666666666667\nConfusion Matrix:\n[[1139    0    4    2    3    9    6    3    7    2]\n [   0 1283    8    5    1    5    1    2   13    4]\n [   1   13 1062   20   11    7   13   15   24    8]\n [   5    7   32 1082    1   41    3   10   22   16]\n [   2    5    4    2 1104    2   11    5    4   37]\n [  15    6   15   32   11  969    9    6   33    8]\n [  14    2   14    0   10   15 1116    1    5    0]\n [   4    8   22    6   11    1    0 1203    4   40]\n [  10   16   14   30    9   36   13    3 1016   13]\n [   9    6    7    9   32    6    0   37    8 1080]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.95      0.97      0.96      1175\n           1       0.95      0.97      0.96      1322\n           2       0.90      0.90      0.90      1174\n           3       0.91      0.89      0.90      1219\n           4       0.93      0.94      0.93      1176\n           5       0.89      0.88      0.88      1104\n           6       0.95      0.95      0.95      1177\n           7       0.94      0.93      0.93      1299\n           8       0.89      0.88      0.89      1160\n           9       0.89      0.90      0.90      1194\n\n    accuracy                           0.92     12000\n   macro avg       0.92      0.92      0.92     12000\nweighted avg       0.92      0.92      0.92     12000\n\n------------------------------------------------------------\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"}]},{"cell_type":"code","source":"# classifier = SVC()\n# classifier.fit(X_train, y_train)\n# y_pred = classifier.predict(X_test)\n\n# accuracy = accuracy_score(y_test, y_pred)\n# cm = confusion_matrix(y_test, y_pred)\n# cr = classification_report(y_test, y_pred)\n\n# # results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n\n# print('SVM')\n# print(accuracy)\n# print('Confusion Matrix:')\n# print(cm)\n# print('Classification Report:')\n# print(cr)\n# print('-' * 60)","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-07-24T09:48:45.418905Z","iopub.execute_input":"2024-07-24T09:48:45.419416Z","iopub.status.idle":"2024-07-24T09:48:45.426737Z","shell.execute_reply.started":"2024-07-24T09:48:45.419380Z","shell.execute_reply":"2024-07-24T09:48:45.425158Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"classifier = KNeighborsClassifier(n_neighbors=10)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\ncr = classification_report(y_test, y_pred)\n\n# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n\nprint('K-NN')\nprint(accuracy)\nprint('Confusion Matrix:')\nprint(cm)\nprint('Classification Report:')\nprint(cr)\nprint('-' * 60)","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:50:30.168309Z","iopub.execute_input":"2024-07-24T09:50:30.169002Z","iopub.status.idle":"2024-07-24T09:50:48.229304Z","shell.execute_reply.started":"2024-07-24T09:50:30.168955Z","shell.execute_reply":"2024-07-24T09:50:48.227166Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"K-NN\n0.9664166666666667\nConfusion Matrix:\n[[1165    0    1    0    1    2    4    1    0    1]\n [   0 1316    2    0    0    0    0    3    0    1]\n [   7   20 1119    2    2    2    2   17    2    1]\n [   2    1    9 1172    0    9    1    8    7   10]\n [   0   11    0    1 1134    0    4    1    0   25]\n [   5    5    0   14    1 1068    6    0    2    3]\n [   4    4    1    0    1    3 1164    0    0    0]\n [   1   27    2    0    2    0    0 1258    2    7]\n [   3   16    5   22   12   25    4    4 1061    8]\n [   5    3    2    8   14    3    1   17    1 1140]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.98      0.99      0.98      1175\n           1       0.94      1.00      0.97      1322\n           2       0.98      0.95      0.97      1174\n           3       0.96      0.96      0.96      1219\n           4       0.97      0.96      0.97      1176\n           5       0.96      0.97      0.96      1104\n           6       0.98      0.99      0.99      1177\n           7       0.96      0.97      0.96      1299\n           8       0.99      0.91      0.95      1160\n           9       0.95      0.95      0.95      1194\n\n    accuracy                           0.97     12000\n   macro avg       0.97      0.97      0.97     12000\nweighted avg       0.97      0.97      0.97     12000\n\n------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"classifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\ncr = classification_report(y_test, y_pred)\n\n# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n\nprint('Decision-Tree')\nprint(accuracy)\nprint('Confusion Matrix:')\nprint(cm)\nprint('Classification Report:')\nprint(cr)\nprint('-' * 60)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:48:49.179442Z","iopub.execute_input":"2024-07-24T09:48:49.179976Z","iopub.status.idle":"2024-07-24T09:49:09.021694Z","shell.execute_reply.started":"2024-07-24T09:48:49.179937Z","shell.execute_reply":"2024-07-24T09:49:09.020285Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Decision-Tree\n0.8694166666666666\nConfusion Matrix:\n[[1073    2   19    7    7   26   14   11    6   10]\n [   0 1273    7    7    4    7    7    4   10    3]\n [  11   14 1012   21   14   14   12   26   35   15]\n [  11    4   39 1011   13   58   10   16   24   33]\n [   1    5   11    7 1024    7   11   18   22   70]\n [  14   11   14   56   13  904   32    7   31   22]\n [  14   10   19    5   22   20 1055    4   26    2]\n [   5   17   24   15    9    3    5 1175   13   33]\n [  14   22   35   52   33   31   21   15  902   35]\n [   6   10   10   16   53   21    6   33   35 1004]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.93      0.91      0.92      1175\n           1       0.93      0.96      0.95      1322\n           2       0.85      0.86      0.86      1174\n           3       0.84      0.83      0.84      1219\n           4       0.86      0.87      0.86      1176\n           5       0.83      0.82      0.82      1104\n           6       0.90      0.90      0.90      1177\n           7       0.90      0.90      0.90      1299\n           8       0.82      0.78      0.80      1160\n           9       0.82      0.84      0.83      1194\n\n    accuracy                           0.87     12000\n   macro avg       0.87      0.87      0.87     12000\nweighted avg       0.87      0.87      0.87     12000\n\n------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"classifier = RandomForestClassifier(n_estimators=100)\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\n\naccuracy = accuracy_score(y_test, y_pred)\ncm = confusion_matrix(y_test, y_pred)\ncr = classification_report(y_test, y_pred)\n\n# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n\nprint('Random Forest')\nprint(accuracy)\nprint('Confusion Matrix:')\nprint(cm)\nprint('Classification Report:')\nprint(cr)\nprint('-' * 60)","metadata":{"execution":{"iopub.status.busy":"2024-07-24T09:49:09.024169Z","iopub.execute_input":"2024-07-24T09:49:09.024697Z","iopub.status.idle":"2024-07-24T09:49:55.748307Z","shell.execute_reply.started":"2024-07-24T09:49:09.024654Z","shell.execute_reply":"2024-07-24T09:49:55.746733Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Random Forest\n0.9680833333333333\nConfusion Matrix:\n[[1153    0    2    1    5    3    4    0    7    0]\n [   0 1307    6    4    2    0    1    1    0    1]\n [   1    5 1146    4    2    0    3    7    4    2]\n [   1    0   20 1162    0   12    1    7    8    8]\n [   2    0    1    0 1138    0    5    5    1   24]\n [   8    2    1   12    2 1064    4    0    8    3]\n [   4    0    0    0    4    6 1157    0    6    0]\n [   1   12   17    1    5    0    0 1245    5   13]\n [   1    4    7   10    8   11    2    2 1112    3]\n [   6    2    5    8   14    5    2   11    8 1133]]\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.98      0.98      0.98      1175\n           1       0.98      0.99      0.98      1322\n           2       0.95      0.98      0.96      1174\n           3       0.97      0.95      0.96      1219\n           4       0.96      0.97      0.97      1176\n           5       0.97      0.96      0.97      1104\n           6       0.98      0.98      0.98      1177\n           7       0.97      0.96      0.97      1299\n           8       0.96      0.96      0.96      1160\n           9       0.95      0.95      0.95      1194\n\n    accuracy                           0.97     12000\n   macro avg       0.97      0.97      0.97     12000\nweighted avg       0.97      0.97      0.97     12000\n\n------------------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}