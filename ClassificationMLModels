{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "101991dd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:04.914080Z",
     "iopub.status.busy": "2024-07-24T09:56:04.913518Z",
     "iopub.status.idle": "2024-07-24T09:56:05.784731Z",
     "shell.execute_reply": "2024-07-24T09:56:05.783703Z"
    },
    "papermill": {
     "duration": 0.880327,
     "end_time": "2024-07-24T09:56:05.787315",
     "exception": false,
     "start_time": "2024-07-24T09:56:04.906988",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/mnist-in-csv/mnist_test.csv\n",
      "/kaggle/input/mnist-in-csv/mnist_train.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b67e8d63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:05.797608Z",
     "iopub.status.busy": "2024-07-24T09:56:05.797093Z",
     "iopub.status.idle": "2024-07-24T09:56:07.636326Z",
     "shell.execute_reply": "2024-07-24T09:56:07.635176Z"
    },
    "papermill": {
     "duration": 1.847408,
     "end_time": "2024-07-24T09:56:07.639155",
     "exception": false,
     "start_time": "2024-07-24T09:56:05.791747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0862c83b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:07.648767Z",
     "iopub.status.busy": "2024-07-24T09:56:07.648370Z",
     "iopub.status.idle": "2024-07-24T09:56:14.024145Z",
     "shell.execute_reply": "2024-07-24T09:56:14.022992Z"
    },
    "papermill": {
     "duration": 6.383679,
     "end_time": "2024-07-24T09:56:14.027002",
     "exception": false,
     "start_time": "2024-07-24T09:56:07.643323",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mnist = pd.read_csv('/kaggle/input/mnist-in-csv/mnist_train.csv')\n",
    "X = mnist.iloc[:, 1:-1]\n",
    "y = mnist.iloc[:, 0]\n",
    "Xtrain, Xtest, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n",
    "X_train = Xtrain/255\n",
    "X_test = Xtest/255\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ee09e316",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:14.036980Z",
     "iopub.status.busy": "2024-07-24T09:56:14.036567Z",
     "iopub.status.idle": "2024-07-24T09:56:20.352688Z",
     "shell.execute_reply": "2024-07-24T09:56:20.351146Z"
    },
    "papermill": {
     "duration": 6.330083,
     "end_time": "2024-07-24T09:56:20.361353",
     "exception": false,
     "start_time": "2024-07-24T09:56:14.031270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression\n",
      "0.9211666666666667\n",
      "Confusion Matrix:\n",
      "[[1139    0    4    2    3    9    6    3    7    2]\n",
      " [   0 1283    8    5    1    5    1    2   13    4]\n",
      " [   1   13 1062   20   11    7   13   15   24    8]\n",
      " [   5    7   32 1082    1   41    3   10   22   16]\n",
      " [   2    5    4    2 1104    2   11    5    4   37]\n",
      " [  15    6   15   32   11  969    9    6   33    8]\n",
      " [  14    2   14    0   10   15 1116    1    5    0]\n",
      " [   4    8   22    6   11    1    0 1203    4   40]\n",
      " [  10   16   14   30    9   36   13    3 1016   13]\n",
      " [   9    6    7    9   32    6    0   37    8 1080]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.95      0.97      0.96      1175\n",
      "           1       0.95      0.97      0.96      1322\n",
      "           2       0.90      0.90      0.90      1174\n",
      "           3       0.91      0.89      0.90      1219\n",
      "           4       0.93      0.94      0.93      1176\n",
      "           5       0.89      0.88      0.88      1104\n",
      "           6       0.95      0.95      0.95      1177\n",
      "           7       0.94      0.93      0.93      1299\n",
      "           8       0.89      0.88      0.89      1160\n",
      "           9       0.89      0.90      0.90      1194\n",
      "\n",
      "    accuracy                           0.92     12000\n",
      "   macro avg       0.92      0.92      0.92     12000\n",
      "weighted avg       0.92      0.92      0.92     12000\n",
      "\n",
      "------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "classifier =  LogisticRegression(max_iter=50)\n",
    "classifier.fit(X_train, y_train)\n",
    "y_pred = classifier.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cr = classification_report(y_test, y_pred)\n",
    "\n",
    "# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n",
    "\n",
    "print('LogisticRegression')\n",
    "print(accuracy)\n",
    "print('Confusion Matrix:')\n",
    "print(cm)\n",
    "print('Classification Report:')\n",
    "print(cr)\n",
    "print('-' * 60)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3f5e1862",
   "metadata": {
    "_kg_hide-output": true,
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:20.382928Z",
     "iopub.status.busy": "2024-07-24T09:56:20.382219Z",
     "iopub.status.idle": "2024-07-24T09:56:20.391068Z",
     "shell.execute_reply": "2024-07-24T09:56:20.389486Z"
    },
    "papermill": {
     "duration": 0.023007,
     "end_time": "2024-07-24T09:56:20.393837",
     "exception": false,
     "start_time": "2024-07-24T09:56:20.370830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# classifier = SVC()\n",
    "# classifier.fit(X_train, y_train)\n",
    "# y_pred = classifier.predict(X_test)\n",
    "\n",
    "# accuracy = accuracy_score(y_test, y_pred)\n",
    "# cm = confusion_matrix(y_test, y_pred)\n",
    "# cr = classification_report(y_test, y_pred)\n",
    "\n",
    "# # results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n",
    "\n",
    "# print('SVM')\n",
    "# print(accuracy)\n",
    "# print('Confusion Matrix:')\n",
    "# print(cm)\n",
    "# print('Classification Report:')\n",
    "# print(cr)\n",
    "# print('-' * 60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "be1ba1de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:20.405051Z",
     "iopub.status.busy": "2024-07-24T09:56:20.404642Z",
     "iopub.status.idle": "2024-07-24T09:56:37.003808Z",
     "shell.execute_reply": "2024-07-24T09:56:37.002571Z"
    },
    "papermill": {
     "duration": 16.608063,
     "end_time": "2024-07-24T09:56:37.006611",
     "exception": false,
     "start_time": "2024-07-24T09:56:20.398548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K-NN\n",
      "0.9664166666666667\n",
      "Confusion Matrix:\n",
      "[[1165    0    1    0    1    2    4    1    0    1]\n",
      " [   0 1316    2    0    0    0    0    3    0    1]\n",
      " [   7   20 1119    2    2    2    2   17    2    1]\n",
      " [   2    1    9 1172    0    9    1    8    7   10]\n",
      " [   0   11    0    1 1134    0    4    1    0   25]\n",
      " [   5    5    0   14    1 1068    6    0    2    3]\n",
      " [   4    4    1    0    1    3 1164    0    0    0]\n",
      " [   1   27    2    0    2    0    0 1258    2    7]\n",
      " [   3   16    5   22   12   25    4    4 1061    8]\n",
      " [   5    3    2    8   14    3    1   17    1 1140]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98      1175\n",
      "           1       0.94      1.00      0.97      1322\n",
      "           2       0.98      0.95      0.97      1174\n",
      "           3       0.96      0.96      0.96      1219\n",
      "           4       0.97      0.96      0.97      1176\n",
      "           5       0.96      0.97      0.96      1104\n",
      "           6       0.98      0.99      0.99      1177\n",
      "           7       0.96      0.97      0.96      1299\n",
      "           8       0.99      0.91      0.95      1160\n",
      "           9       0.95      0.95      0.95      1194\n",
      "\n",
      "    accuracy                           0.97     12000\n",
      "   macro avg       0.97      0.97      0.97     12000\n",
      "weighted avg       0.97      0.97      0.97     12000\n",
      "\n",
      "------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "classifier = KNeighborsClassifier(n_neighbors=10)\n",
    "classifier.fit(X_train, y_train)\n",
    "y_pred = classifier.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cr = classification_report(y_test, y_pred)\n",
    "\n",
    "# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n",
    "\n",
    "print('K-NN')\n",
    "print(accuracy)\n",
    "print('Confusion Matrix:')\n",
    "print(cm)\n",
    "print('Classification Report:')\n",
    "print(cr)\n",
    "print('-' * 60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f4238ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:37.018705Z",
     "iopub.status.busy": "2024-07-24T09:56:37.017412Z",
     "iopub.status.idle": "2024-07-24T09:56:55.240112Z",
     "shell.execute_reply": "2024-07-24T09:56:55.238917Z"
    },
    "papermill": {
     "duration": 18.231547,
     "end_time": "2024-07-24T09:56:55.242982",
     "exception": false,
     "start_time": "2024-07-24T09:56:37.011435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision-Tree\n",
      "0.8671666666666666\n",
      "Confusion Matrix:\n",
      "[[1075    3   15    7    8   22   14    8   15    8]\n",
      " [   2 1274    5    9    4    5    3    6   10    4]\n",
      " [  18   13  992   27   22   10   10   31   37   14]\n",
      " [  17    7   36 1018    6   57    5   13   31   29]\n",
      " [   2   10    7   11 1015   11   16   13   20   71]\n",
      " [  17   13   10   53   16  898   28    9   38   22]\n",
      " [  21   12   14    3   25   20 1050    6   22    4]\n",
      " [   6   16   26   17   13    4    3 1174   12   28]\n",
      " [  14   19   35   45   32   29   24   17  915   30]\n",
      " [   6   14   10   13   61   18    6   35   36  995]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.91      0.91      1175\n",
      "           1       0.92      0.96      0.94      1322\n",
      "           2       0.86      0.84      0.85      1174\n",
      "           3       0.85      0.84      0.84      1219\n",
      "           4       0.84      0.86      0.85      1176\n",
      "           5       0.84      0.81      0.82      1104\n",
      "           6       0.91      0.89      0.90      1177\n",
      "           7       0.89      0.90      0.90      1299\n",
      "           8       0.81      0.79      0.80      1160\n",
      "           9       0.83      0.83      0.83      1194\n",
      "\n",
      "    accuracy                           0.87     12000\n",
      "   macro avg       0.87      0.87      0.87     12000\n",
      "weighted avg       0.87      0.87      0.87     12000\n",
      "\n",
      "------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "classifier = DecisionTreeClassifier()\n",
    "classifier.fit(X_train, y_train)\n",
    "y_pred = classifier.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cr = classification_report(y_test, y_pred)\n",
    "\n",
    "# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n",
    "\n",
    "print('Decision-Tree')\n",
    "print(accuracy)\n",
    "print('Confusion Matrix:')\n",
    "print(cm)\n",
    "print('Classification Report:')\n",
    "print(cr)\n",
    "print('-' * 60)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "53dad24e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-24T09:56:55.254282Z",
     "iopub.status.busy": "2024-07-24T09:56:55.253411Z",
     "iopub.status.idle": "2024-07-24T09:57:34.730550Z",
     "shell.execute_reply": "2024-07-24T09:57:34.729461Z"
    },
    "papermill": {
     "duration": 39.49025,
     "end_time": "2024-07-24T09:57:34.737987",
     "exception": false,
     "start_time": "2024-07-24T09:56:55.247737",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest\n",
      "0.9693333333333334\n",
      "Confusion Matrix:\n",
      "[[1156    0    1    0    3    2    2    0    9    2]\n",
      " [   0 1303    8    5    2    0    1    1    0    2]\n",
      " [   2    5 1145    3    3    0    3    7    5    1]\n",
      " [   2    0   20 1160    0   11    1    8   10    7]\n",
      " [   3    0    1    0 1143    0    3    5    1   20]\n",
      " [   8    2    2   14    0 1064    6    1    5    2]\n",
      " [   4    0    1    0    4    5 1160    0    3    0]\n",
      " [   1   12   16    2    4    0    0 1252    4    8]\n",
      " [   1    1    9   10    8    6    3    3 1113    6]\n",
      " [   4    2    4   10   15    5    2   12    4 1136]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.98      0.98      1175\n",
      "           1       0.98      0.99      0.98      1322\n",
      "           2       0.95      0.98      0.96      1174\n",
      "           3       0.96      0.95      0.96      1219\n",
      "           4       0.97      0.97      0.97      1176\n",
      "           5       0.97      0.96      0.97      1104\n",
      "           6       0.98      0.99      0.98      1177\n",
      "           7       0.97      0.96      0.97      1299\n",
      "           8       0.96      0.96      0.96      1160\n",
      "           9       0.96      0.95      0.96      1194\n",
      "\n",
      "    accuracy                           0.97     12000\n",
      "   macro avg       0.97      0.97      0.97     12000\n",
      "weighted avg       0.97      0.97      0.97     12000\n",
      "\n",
      "------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "classifier = RandomForestClassifier(n_estimators=100)\n",
    "classifier.fit(X_train, y_train)\n",
    "y_pred = classifier.predict(X_test)\n",
    "\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "cr = classification_report(y_test, y_pred)\n",
    "\n",
    "# results[LogisticRegression] = {'accuracy': accuracy, 'confusion_matrix': cm, 'classification_report': cr}\n",
    "\n",
    "print('Random Forest')\n",
    "print(accuracy)\n",
    "print('Confusion Matrix:')\n",
    "print(cm)\n",
    "print('Classification Report:')\n",
    "print(cr)\n",
    "print('-' * 60)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b683974f",
   "metadata": {
    "papermill": {
     "duration": 0.00444,
     "end_time": "2024-07-24T09:57:34.747551",
     "exception": false,
     "start_time": "2024-07-24T09:57:34.743111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 27352,
     "sourceId": 34877,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 93.362868,
   "end_time": "2024-07-24T09:57:35.372976",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-24T09:56:02.010108",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
