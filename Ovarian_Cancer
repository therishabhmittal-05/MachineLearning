{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1914438,"sourceType":"datasetVersion","datasetId":1141564}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-21T13:45:16.081052Z","iopub.execute_input":"2024-10-21T13:45:16.081522Z","iopub.status.idle":"2024-10-21T13:45:17.514009Z","shell.execute_reply.started":"2024-10-21T13:45:16.081479Z","shell.execute_reply":"2024-10-21T13:45:17.512560Z"},"trusted":true},"outputs":[{"name":"stdout","text":"/kaggle/input/predict-ovarian-cancer/Supplementary data 5.xlsx\n/kaggle/input/predict-ovarian-cancer/Supplementary data 2.xlsx\n/kaggle/input/predict-ovarian-cancer/Supplementary data 4.xlsx\n/kaggle/input/predict-ovarian-cancer/Supplementary data 1.xlsx\n/kaggle/input/predict-ovarian-cancer/Supplementary data 3.xlsx\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"df = pd.read_excel(\"/kaggle/input/predict-ovarian-cancer/Supplementary data 1.xlsx\")\ndf.head()\ndf = df.drop(\"SUBJECT_ID\", axis = 1)\n# df.columns\n# df.isnull().sum()\ndf.info()\n","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:17.515997Z","iopub.execute_input":"2024-10-21T13:45:17.516527Z","iopub.status.idle":"2024-10-21T13:45:18.261252Z","shell.execute_reply.started":"2024-10-21T13:45:17.516483Z","shell.execute_reply":"2024-10-21T13:45:18.259745Z"},"trusted":true},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 349 entries, 0 to 348\nData columns (total 50 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   AFP        327 non-null    object \n 1   AG         348 non-null    float64\n 2   Age        349 non-null    int64  \n 3   ALB        339 non-null    float64\n 4   ALP        339 non-null    float64\n 5   ALT        339 non-null    float64\n 6   AST        339 non-null    float64\n 7   BASO#      349 non-null    float64\n 8   BASO%      349 non-null    float64\n 9   BUN        349 non-null    float64\n 10  Ca         349 non-null    float64\n 11  CA125      332 non-null    object \n 12  CA19-9     325 non-null    object \n 13  CA72-4     109 non-null    float64\n 14  CEA        327 non-null    float64\n 15  CL         349 non-null    float64\n 16  CO2CP      348 non-null    float64\n 17  CREA       349 non-null    float64\n 18  TYPE       349 non-null    int64  \n 19  DBIL       339 non-null    float64\n 20  EO#        349 non-null    float64\n 21  EO%        349 non-null    float64\n 22  GGT        339 non-null    float64\n 23  GLO        339 non-null    float64\n 24  GLU.       349 non-null    float64\n 25  HCT        349 non-null    float64\n 26  HE4        329 non-null    float64\n 27  HGB        349 non-null    float64\n 28  IBIL       339 non-null    float64\n 29  K          349 non-null    float64\n 30  LYM#       349 non-null    float64\n 31  LYM%       349 non-null    float64\n 32  MCH        349 non-null    float64\n 33  MCV        349 non-null    float64\n 34  Menopause  349 non-null    int64  \n 35  Mg         349 non-null    float64\n 36  MONO#      349 non-null    float64\n 37  MONO%      349 non-null    float64\n 38  MPV        347 non-null    float64\n 39  Na         349 non-null    float64\n 40  NEU        258 non-null    float64\n 41  PCT        347 non-null    float64\n 42  PDW        347 non-null    float64\n 43  PHOS       349 non-null    float64\n 44  PLT        349 non-null    int64  \n 45  RBC        349 non-null    float64\n 46  RDW        349 non-null    float64\n 47  TBIL       339 non-null    float64\n 48  TP         339 non-null    float64\n 49  UA         349 non-null    float64\ndtypes: float64(43), int64(4), object(3)\nmemory usage: 136.5+ KB\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Function to extract numerical value from object data type\nimport re\ndef extract_numeric(value):\n    if isinstance(value, (int , float)):\n        return value\n    if isinstance(value, str):\n        match = re.search(r'\\d+', value)\n        if match:\n            return float(match.group())\n    return none","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:19.240903Z","iopub.execute_input":"2024-10-21T13:45:19.241502Z","iopub.status.idle":"2024-10-21T13:45:19.249273Z","shell.execute_reply.started":"2024-10-21T13:45:19.241459Z","shell.execute_reply":"2024-10-21T13:45:19.247531Z"},"trusted":true},"outputs":[],"execution_count":3},{"cell_type":"code","source":"df[\"CA19-9\"] = df[\"CA19-9\"].apply(extract_numeric).astype(np.float64)\ndf[\"CA125\"] = df[\"CA125\"].apply(extract_numeric).astype(np.float64)\ndf[\"AFP\"] = df[\"AFP\"].apply(extract_numeric).astype(np.float64)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:20.110557Z","iopub.execute_input":"2024-10-21T13:45:20.111035Z","iopub.status.idle":"2024-10-21T13:45:20.122107Z","shell.execute_reply.started":"2024-10-21T13:45:20.110994Z","shell.execute_reply":"2024-10-21T13:45:20.120655Z"},"trusted":true},"outputs":[],"execution_count":4},{"cell_type":"code","source":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors = 5)\ndf_imputed = imputer.fit_transform(df)\ndf = pd.DataFrame(df_imputed, columns = df.columns, index = df.index)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:21.019415Z","iopub.execute_input":"2024-10-21T13:45:21.020355Z","iopub.status.idle":"2024-10-21T13:45:21.410338Z","shell.execute_reply.started":"2024-10-21T13:45:21.020309Z","shell.execute_reply":"2024-10-21T13:45:21.408333Z"},"trusted":true},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:22.318181Z","iopub.execute_input":"2024-10-21T13:45:22.319101Z","iopub.status.idle":"2024-10-21T13:45:22.335801Z","shell.execute_reply.started":"2024-10-21T13:45:22.319048Z","shell.execute_reply":"2024-10-21T13:45:22.334237Z"},"trusted":true},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 349 entries, 0 to 348\nData columns (total 50 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   AFP        349 non-null    float64\n 1   AG         349 non-null    float64\n 2   Age        349 non-null    float64\n 3   ALB        349 non-null    float64\n 4   ALP        349 non-null    float64\n 5   ALT        349 non-null    float64\n 6   AST        349 non-null    float64\n 7   BASO#      349 non-null    float64\n 8   BASO%      349 non-null    float64\n 9   BUN        349 non-null    float64\n 10  Ca         349 non-null    float64\n 11  CA125      349 non-null    float64\n 12  CA19-9     349 non-null    float64\n 13  CA72-4     349 non-null    float64\n 14  CEA        349 non-null    float64\n 15  CL         349 non-null    float64\n 16  CO2CP      349 non-null    float64\n 17  CREA       349 non-null    float64\n 18  TYPE       349 non-null    float64\n 19  DBIL       349 non-null    float64\n 20  EO#        349 non-null    float64\n 21  EO%        349 non-null    float64\n 22  GGT        349 non-null    float64\n 23  GLO        349 non-null    float64\n 24  GLU.       349 non-null    float64\n 25  HCT        349 non-null    float64\n 26  HE4        349 non-null    float64\n 27  HGB        349 non-null    float64\n 28  IBIL       349 non-null    float64\n 29  K          349 non-null    float64\n 30  LYM#       349 non-null    float64\n 31  LYM%       349 non-null    float64\n 32  MCH        349 non-null    float64\n 33  MCV        349 non-null    float64\n 34  Menopause  349 non-null    float64\n 35  Mg         349 non-null    float64\n 36  MONO#      349 non-null    float64\n 37  MONO%      349 non-null    float64\n 38  MPV        349 non-null    float64\n 39  Na         349 non-null    float64\n 40  NEU        349 non-null    float64\n 41  PCT        349 non-null    float64\n 42  PDW        349 non-null    float64\n 43  PHOS       349 non-null    float64\n 44  PLT        349 non-null    float64\n 45  RBC        349 non-null    float64\n 46  RDW        349 non-null    float64\n 47  TBIL       349 non-null    float64\n 48  TP         349 non-null    float64\n 49  UA         349 non-null    float64\ndtypes: float64(50)\nmemory usage: 136.5 KB\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Data Split\nfrom sklearn.model_selection import train_test_split\nX_train, X_test = train_test_split(df, stratify = df[\"TYPE\"], test_size = 0.2)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:22.756243Z","iopub.execute_input":"2024-10-21T13:45:22.756784Z","iopub.status.idle":"2024-10-21T13:45:22.767275Z","shell.execute_reply.started":"2024-10-21T13:45:22.756738Z","shell.execute_reply":"2024-10-21T13:45:22.765919Z"},"trusted":true},"outputs":[],"execution_count":7},{"cell_type":"code","source":"X_train.info()\nX_train.head()\nX_train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:23.851848Z","iopub.execute_input":"2024-10-21T13:45:23.852509Z","iopub.status.idle":"2024-10-21T13:45:23.993056Z","shell.execute_reply.started":"2024-10-21T13:45:23.852447Z","shell.execute_reply":"2024-10-21T13:45:23.991670Z"},"trusted":true},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 279 entries, 47 to 235\nData columns (total 50 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   AFP        279 non-null    float64\n 1   AG         279 non-null    float64\n 2   Age        279 non-null    float64\n 3   ALB        279 non-null    float64\n 4   ALP        279 non-null    float64\n 5   ALT        279 non-null    float64\n 6   AST        279 non-null    float64\n 7   BASO#      279 non-null    float64\n 8   BASO%      279 non-null    float64\n 9   BUN        279 non-null    float64\n 10  Ca         279 non-null    float64\n 11  CA125      279 non-null    float64\n 12  CA19-9     279 non-null    float64\n 13  CA72-4     279 non-null    float64\n 14  CEA        279 non-null    float64\n 15  CL         279 non-null    float64\n 16  CO2CP      279 non-null    float64\n 17  CREA       279 non-null    float64\n 18  TYPE       279 non-null    float64\n 19  DBIL       279 non-null    float64\n 20  EO#        279 non-null    float64\n 21  EO%        279 non-null    float64\n 22  GGT        279 non-null    float64\n 23  GLO        279 non-null    float64\n 24  GLU.       279 non-null    float64\n 25  HCT        279 non-null    float64\n 26  HE4        279 non-null    float64\n 27  HGB        279 non-null    float64\n 28  IBIL       279 non-null    float64\n 29  K          279 non-null    float64\n 30  LYM#       279 non-null    float64\n 31  LYM%       279 non-null    float64\n 32  MCH        279 non-null    float64\n 33  MCV        279 non-null    float64\n 34  Menopause  279 non-null    float64\n 35  Mg         279 non-null    float64\n 36  MONO#      279 non-null    float64\n 37  MONO%      279 non-null    float64\n 38  MPV        279 non-null    float64\n 39  Na         279 non-null    float64\n 40  NEU        279 non-null    float64\n 41  PCT        279 non-null    float64\n 42  PDW        279 non-null    float64\n 43  PHOS       279 non-null    float64\n 44  PLT        279 non-null    float64\n 45  RBC        279 non-null    float64\n 46  RDW        279 non-null    float64\n 47  TBIL       279 non-null    float64\n 48  TP         279 non-null    float64\n 49  UA         279 non-null    float64\ndtypes: float64(50)\nmemory usage: 111.2 KB\n","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"               AFP          AG         Age         ALB         ALP  \\\ncount   279.000000  279.000000  279.000000  279.000000  279.000000   \nmean     13.955656   19.362616   44.559140   41.118495   76.963441   \nstd     107.198944    4.220531   15.381103    5.623694   47.353448   \nmin       0.000000    6.600000   15.000000   22.900000   26.000000   \n25%       1.385000   17.300000   31.000000   38.350000   60.000000   \n50%       2.040000   19.810000   45.000000   42.200000   70.600000   \n75%       3.270000   22.250000   57.000000   45.300000   85.500000   \nmax    1210.000000   33.330000   77.000000   51.500000  763.000000   \n\n              ALT         AST       BASO#       BASO%         BUN  ...  \\\ncount  279.000000  279.000000  279.000000  279.000000  279.000000  ...   \nmean    17.843728   19.030108    0.028244    0.470609    4.021649  ...   \nstd     10.428473    8.480495    0.021140    0.356140    1.323292  ...   \nmin      5.000000    7.000000    0.000000    0.000000    1.120000  ...   \n25%     12.000000   13.500000    0.010000    0.200000    3.150000  ...   \n50%     15.000000   17.000000    0.020000    0.400000    3.860000  ...   \n75%     21.000000   22.000000    0.040000    0.700000    4.815000  ...   \nmax     86.000000   78.000000    0.120000    1.940000   10.190000  ...   \n\n              NEU         PCT         PDW        PHOS         PLT         RBC  \\\ncount  279.000000  279.000000  279.000000  279.000000  279.000000  279.000000   \nmean    65.099577    0.246805   14.315993    1.122616  252.774194    4.365591   \nstd     11.029655    0.085903    2.962530    0.188748   97.763640    0.475138   \nmin     37.200000    0.070000    8.800000    0.650000   74.000000    2.620000   \n25%     57.430000    0.190000   11.900000    0.990000  200.000000    4.130000   \n50%     64.700000    0.240000   13.800000    1.120000  232.000000    4.390000   \n75%     72.560000    0.294500   16.850000    1.240000  284.000000    4.640000   \nmax     92.000000    0.690000   22.500000    1.750000  868.000000    6.740000   \n\n             RDW        TBIL          TP          UA  \ncount  279.00000  279.000000  279.000000  279.000000  \nmean    13.54319    9.159713   70.908889  244.650538  \nstd      1.77086    4.090649    7.366646   66.124486  \nmin     11.30000    2.500000   32.900000   96.000000  \n25%     12.30000    6.400000   67.350000  205.500000  \n50%     13.10000    8.600000   72.240000  239.700000  \n75%     14.40000   10.810000   75.700000  278.150000  \nmax     22.20000   38.300000   86.800000  616.700000  \n\n[8 rows x 50 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AFP</th>\n      <th>AG</th>\n      <th>Age</th>\n      <th>ALB</th>\n      <th>ALP</th>\n      <th>ALT</th>\n      <th>AST</th>\n      <th>BASO#</th>\n      <th>BASO%</th>\n      <th>BUN</th>\n      <th>...</th>\n      <th>NEU</th>\n      <th>PCT</th>\n      <th>PDW</th>\n      <th>PHOS</th>\n      <th>PLT</th>\n      <th>RBC</th>\n      <th>RDW</th>\n      <th>TBIL</th>\n      <th>TP</th>\n      <th>UA</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>...</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.00000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n      <td>279.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>13.955656</td>\n      <td>19.362616</td>\n      <td>44.559140</td>\n      <td>41.118495</td>\n      <td>76.963441</td>\n      <td>17.843728</td>\n      <td>19.030108</td>\n      <td>0.028244</td>\n      <td>0.470609</td>\n      <td>4.021649</td>\n      <td>...</td>\n      <td>65.099577</td>\n      <td>0.246805</td>\n      <td>14.315993</td>\n      <td>1.122616</td>\n      <td>252.774194</td>\n      <td>4.365591</td>\n      <td>13.54319</td>\n      <td>9.159713</td>\n      <td>70.908889</td>\n      <td>244.650538</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>107.198944</td>\n      <td>4.220531</td>\n      <td>15.381103</td>\n      <td>5.623694</td>\n      <td>47.353448</td>\n      <td>10.428473</td>\n      <td>8.480495</td>\n      <td>0.021140</td>\n      <td>0.356140</td>\n      <td>1.323292</td>\n      <td>...</td>\n      <td>11.029655</td>\n      <td>0.085903</td>\n      <td>2.962530</td>\n      <td>0.188748</td>\n      <td>97.763640</td>\n      <td>0.475138</td>\n      <td>1.77086</td>\n      <td>4.090649</td>\n      <td>7.366646</td>\n      <td>66.124486</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.000000</td>\n      <td>6.600000</td>\n      <td>15.000000</td>\n      <td>22.900000</td>\n      <td>26.000000</td>\n      <td>5.000000</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.120000</td>\n      <td>...</td>\n      <td>37.200000</td>\n      <td>0.070000</td>\n      <td>8.800000</td>\n      <td>0.650000</td>\n      <td>74.000000</td>\n      <td>2.620000</td>\n      <td>11.30000</td>\n      <td>2.500000</td>\n      <td>32.900000</td>\n      <td>96.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.385000</td>\n      <td>17.300000</td>\n      <td>31.000000</td>\n      <td>38.350000</td>\n      <td>60.000000</td>\n      <td>12.000000</td>\n      <td>13.500000</td>\n      <td>0.010000</td>\n      <td>0.200000</td>\n      <td>3.150000</td>\n      <td>...</td>\n      <td>57.430000</td>\n      <td>0.190000</td>\n      <td>11.900000</td>\n      <td>0.990000</td>\n      <td>200.000000</td>\n      <td>4.130000</td>\n      <td>12.30000</td>\n      <td>6.400000</td>\n      <td>67.350000</td>\n      <td>205.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.040000</td>\n      <td>19.810000</td>\n      <td>45.000000</td>\n      <td>42.200000</td>\n      <td>70.600000</td>\n      <td>15.000000</td>\n      <td>17.000000</td>\n      <td>0.020000</td>\n      <td>0.400000</td>\n      <td>3.860000</td>\n      <td>...</td>\n      <td>64.700000</td>\n      <td>0.240000</td>\n      <td>13.800000</td>\n      <td>1.120000</td>\n      <td>232.000000</td>\n      <td>4.390000</td>\n      <td>13.10000</td>\n      <td>8.600000</td>\n      <td>72.240000</td>\n      <td>239.700000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.270000</td>\n      <td>22.250000</td>\n      <td>57.000000</td>\n      <td>45.300000</td>\n      <td>85.500000</td>\n      <td>21.000000</td>\n      <td>22.000000</td>\n      <td>0.040000</td>\n      <td>0.700000</td>\n      <td>4.815000</td>\n      <td>...</td>\n      <td>72.560000</td>\n      <td>0.294500</td>\n      <td>16.850000</td>\n      <td>1.240000</td>\n      <td>284.000000</td>\n      <td>4.640000</td>\n      <td>14.40000</td>\n      <td>10.810000</td>\n      <td>75.700000</td>\n      <td>278.150000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1210.000000</td>\n      <td>33.330000</td>\n      <td>77.000000</td>\n      <td>51.500000</td>\n      <td>763.000000</td>\n      <td>86.000000</td>\n      <td>78.000000</td>\n      <td>0.120000</td>\n      <td>1.940000</td>\n      <td>10.190000</td>\n      <td>...</td>\n      <td>92.000000</td>\n      <td>0.690000</td>\n      <td>22.500000</td>\n      <td>1.750000</td>\n      <td>868.000000</td>\n      <td>6.740000</td>\n      <td>22.20000</td>\n      <td>38.300000</td>\n      <td>86.800000</td>\n      <td>616.700000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 50 columns</p>\n</div>"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# Scaling","metadata":{}},{"cell_type":"code","source":"# Feature Scaling- RobustScaler: Scales the data based on the median and interquartile range (IQR)\nfrom sklearn.preprocessing import RobustScaler\n\nscaler = RobustScaler()\nscaled_X = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(scaled_X, columns = X_train.columns, index = X_train.index)\nscaled_test = scaler.transform(X_test)\nX_test = pd.DataFrame(scaled_test, columns = X_test.columns, index = X_test.index)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T13:45:26.110679Z","iopub.execute_input":"2024-10-21T13:45:26.111096Z","iopub.status.idle":"2024-10-21T13:45:26.135341Z","shell.execute_reply.started":"2024-10-21T13:45:26.111057Z","shell.execute_reply":"2024-10-21T13:45:26.133985Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"# Features Selection\n","metadata":{}},{"cell_type":"code","source":"# # Coorelation matrix (Defines only linear Relation)\n# corrmat = X_train.drop(\"TYPE\", axis = 1).copy()\n# corrmat = corrmat.corr()\n# # sns.heatmap(corrmat,annot=True,cmap='gray',fmt='.1f')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:29.862933Z","iopub.execute_input":"2024-10-21T13:45:29.863380Z","iopub.status.idle":"2024-10-21T13:45:29.868754Z","shell.execute_reply.started":"2024-10-21T13:45:29.863338Z","shell.execute_reply":"2024-10-21T13:45:29.867443Z"},"trusted":true},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Mutual Information\nfrom sklearn.feature_selection import mutual_info_classif\nX_train_1 = X_train.drop(\"TYPE\", axis = 1)\ny_train_1 = X_train.TYPE\ndef cal_mi_score(X_train_1, y_train_1):\n    mi_score = mutual_info_classif(X_train_1, y_train_1)\n    mi_score_series = pd.DataFrame({\n        \"Features\":X_train_1.columns,\n        \"mi_score\": mi_score\n    })\n    mi_score_series = mi_score_series.sort_values(by = 'mi_score', ascending = False)  \n    return mi_score_series\nfeature_mi = cal_mi_score(X_train_1, y_train_1)\nfeature_mi","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:30.488199Z","iopub.execute_input":"2024-10-21T13:45:30.489524Z","iopub.status.idle":"2024-10-21T13:45:30.668045Z","shell.execute_reply.started":"2024-10-21T13:45:30.489471Z","shell.execute_reply":"2024-10-21T13:45:30.666993Z"},"trusted":true},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"     Features  mi_score\n25        HE4  0.295148\n0         AFP  0.213454\n11      CA125  0.209533\n39        NEU  0.159354\n2         Age  0.147604\n13     CA72-4  0.125164\n3         ALB  0.093625\n33  Menopause  0.091715\n4         ALP  0.075306\n12     CA19-9  0.075159\n46       TBIL  0.066402\n45        RDW  0.061450\n38         Na  0.060114\n22        GLO  0.056671\n30       LYM%  0.054255\n26        HGB  0.052268\n43        PLT  0.047058\n35      MONO#  0.045178\n27       IBIL  0.040056\n16      CO2CP  0.033758\n41        PDW  0.032294\n47         TP  0.027805\n18       DBIL  0.027419\n28          K  0.023210\n31        MCH  0.018809\n9         BUN  0.018600\n14        CEA  0.016667\n10         Ca  0.014065\n36      MONO%  0.013913\n8       BASO%  0.007681\n23       GLU.  0.006879\n32        MCV  0.006807\n29       LYM#  0.006153\n15         CL  0.002193\n40        PCT  0.000000\n42       PHOS  0.000000\n44        RBC  0.000000\n24        HCT  0.000000\n37        MPV  0.000000\n34         Mg  0.000000\n1          AG  0.000000\n21        GGT  0.000000\n20        EO%  0.000000\n19        EO#  0.000000\n17       CREA  0.000000\n7       BASO#  0.000000\n6         AST  0.000000\n5         ALT  0.000000\n48         UA  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Features</th>\n      <th>mi_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>25</th>\n      <td>HE4</td>\n      <td>0.295148</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>AFP</td>\n      <td>0.213454</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>CA125</td>\n      <td>0.209533</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>NEU</td>\n      <td>0.159354</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Age</td>\n      <td>0.147604</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>CA72-4</td>\n      <td>0.125164</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ALB</td>\n      <td>0.093625</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Menopause</td>\n      <td>0.091715</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ALP</td>\n      <td>0.075306</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>CA19-9</td>\n      <td>0.075159</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>TBIL</td>\n      <td>0.066402</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>RDW</td>\n      <td>0.061450</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Na</td>\n      <td>0.060114</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>GLO</td>\n      <td>0.056671</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>LYM%</td>\n      <td>0.054255</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>HGB</td>\n      <td>0.052268</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>PLT</td>\n      <td>0.047058</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>MONO#</td>\n      <td>0.045178</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>IBIL</td>\n      <td>0.040056</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>CO2CP</td>\n      <td>0.033758</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>PDW</td>\n      <td>0.032294</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>TP</td>\n      <td>0.027805</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>DBIL</td>\n      <td>0.027419</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>K</td>\n      <td>0.023210</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>MCH</td>\n      <td>0.018809</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>BUN</td>\n      <td>0.018600</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>CEA</td>\n      <td>0.016667</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Ca</td>\n      <td>0.014065</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>MONO%</td>\n      <td>0.013913</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>BASO%</td>\n      <td>0.007681</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>GLU.</td>\n      <td>0.006879</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>MCV</td>\n      <td>0.006807</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>LYM#</td>\n      <td>0.006153</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>CL</td>\n      <td>0.002193</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>PCT</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>PHOS</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>RBC</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>HCT</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>MPV</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Mg</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AG</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>GGT</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>EO%</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>EO#</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>CREA</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>BASO#</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>AST</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>ALT</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>UA</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"sel_mi = list(feature_mi.head(10).Features)\nX_train_mi = X_train[sel_mi]\ny_train_mi = pd.Series(X_train.TYPE, index = X_train_mi.index)\nX_test_mi = X_test[sel_mi]\ny_test_mi = pd.Series(X_test.TYPE, index = X_test_mi.index)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:31.582805Z","iopub.execute_input":"2024-10-21T13:45:31.584256Z","iopub.status.idle":"2024-10-21T13:45:31.594030Z","shell.execute_reply.started":"2024-10-21T13:45:31.584198Z","shell.execute_reply":"2024-10-21T13:45:31.592523Z"},"trusted":true},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Model Based- Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nX_train_2 = X_train.drop(\"TYPE\", axis = 1)\ny_train_2 = X_train.TYPE\nforestClassif = RandomForestClassifier(n_estimators = 100, max_features = 10)\nforestClassif.fit(X_train_2, y_train_2)\nmodel_feature = forestClassif.feature_importances_\nfeature_score = pd.DataFrame({\n    'Feature': X_train_2.columns,\n    'Importance': model_feature\n})\nfeature_score = feature_score.sort_values(by= \"Importance\", ascending = False)\nfeature_score","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:32.527925Z","iopub.execute_input":"2024-10-21T13:45:32.528392Z","iopub.status.idle":"2024-10-21T13:45:32.971089Z","shell.execute_reply.started":"2024-10-21T13:45:32.528348Z","shell.execute_reply":"2024-10-21T13:45:32.969675Z"},"trusted":true},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"      Feature  Importance\n25        HE4    0.211342\n11      CA125    0.112034\n2         Age    0.070738\n39        NEU    0.065893\n13     CA72-4    0.056619\n3         ALB    0.032589\n12     CA19-9    0.021934\n14        CEA    0.019763\n33  Menopause    0.019198\n22        GLO    0.018310\n30       LYM%    0.018091\n6         AST    0.016405\n26        HGB    0.014603\n43        PLT    0.013947\n27       IBIL    0.013717\n46       TBIL    0.013565\n4         ALP    0.013328\n47         TP    0.012879\n37        MPV    0.012184\n23       GLU.    0.012148\n40        PCT    0.011863\n15         CL    0.011531\n24        HCT    0.010942\n0         AFP    0.010883\n48         UA    0.010850\n29       LYM#    0.010222\n45        RDW    0.010064\n42       PHOS    0.009928\n16      CO2CP    0.009710\n31        MCH    0.009557\n38         Na    0.008884\n17       CREA    0.008512\n36      MONO%    0.008332\n5         ALT    0.007716\n10         Ca    0.007675\n9         BUN    0.007617\n20        EO%    0.007404\n1          AG    0.007338\n34         Mg    0.007140\n28          K    0.007066\n8       BASO%    0.007033\n21        GGT    0.006059\n35      MONO#    0.006035\n19        EO#    0.005635\n44        RBC    0.005326\n18       DBIL    0.005165\n32        MCV    0.004201\n41        PDW    0.004174\n7       BASO#    0.003851","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Feature</th>\n      <th>Importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>25</th>\n      <td>HE4</td>\n      <td>0.211342</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>CA125</td>\n      <td>0.112034</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Age</td>\n      <td>0.070738</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>NEU</td>\n      <td>0.065893</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>CA72-4</td>\n      <td>0.056619</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ALB</td>\n      <td>0.032589</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>CA19-9</td>\n      <td>0.021934</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>CEA</td>\n      <td>0.019763</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Menopause</td>\n      <td>0.019198</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>GLO</td>\n      <td>0.018310</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>LYM%</td>\n      <td>0.018091</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>AST</td>\n      <td>0.016405</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>HGB</td>\n      <td>0.014603</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>PLT</td>\n      <td>0.013947</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>IBIL</td>\n      <td>0.013717</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>TBIL</td>\n      <td>0.013565</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ALP</td>\n      <td>0.013328</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>TP</td>\n      <td>0.012879</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>MPV</td>\n      <td>0.012184</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>GLU.</td>\n      <td>0.012148</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>PCT</td>\n      <td>0.011863</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>CL</td>\n      <td>0.011531</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>HCT</td>\n      <td>0.010942</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>AFP</td>\n      <td>0.010883</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>UA</td>\n      <td>0.010850</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>LYM#</td>\n      <td>0.010222</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>RDW</td>\n      <td>0.010064</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>PHOS</td>\n      <td>0.009928</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>CO2CP</td>\n      <td>0.009710</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>MCH</td>\n      <td>0.009557</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>Na</td>\n      <td>0.008884</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>CREA</td>\n      <td>0.008512</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>MONO%</td>\n      <td>0.008332</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>ALT</td>\n      <td>0.007716</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Ca</td>\n      <td>0.007675</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>BUN</td>\n      <td>0.007617</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>EO%</td>\n      <td>0.007404</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AG</td>\n      <td>0.007338</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Mg</td>\n      <td>0.007140</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>K</td>\n      <td>0.007066</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>BASO%</td>\n      <td>0.007033</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>GGT</td>\n      <td>0.006059</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>MONO#</td>\n      <td>0.006035</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>EO#</td>\n      <td>0.005635</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>RBC</td>\n      <td>0.005326</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>DBIL</td>\n      <td>0.005165</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>MCV</td>\n      <td>0.004201</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>PDW</td>\n      <td>0.004174</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>BASO#</td>\n      <td>0.003851</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"sel_model = list(feature_score.head(10).Feature)\nX_train_model = X_train[sel_model]\ny_train_model = pd.Series(X_train.TYPE, index = X_train_model.index)\nX_test_model = X_test[sel_model]\ny_test_model = pd.Series(X_test.TYPE, index = X_test_model.index)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:33.616616Z","iopub.execute_input":"2024-10-21T13:45:33.617133Z","iopub.status.idle":"2024-10-21T13:45:33.627069Z","shell.execute_reply.started":"2024-10-21T13:45:33.617085Z","shell.execute_reply":"2024-10-21T13:45:33.625613Z"},"trusted":true},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Assign weights based on positions for sel_model and sel_mi\nweights1 = {item: idx for idx, item in enumerate(sel_model)}\nweights2 = {item: idx + len(sel_model) for idx, item in enumerate(sel_mi)}\n\n# Combine lists with weights\ncombined_weights = {**weights1, **weights2}\n\n# Create a new list3 sorted by conditions\n# Priority 1: Items in both lists\n# Priority 2: Items only in list1\n# Priority 3: Items only in list2\n\n# Create a list to hold items with their weights\ncombined = [(item, combined_weights[item]) for item in combined_weights]\n\n# Sort combined list by conditions\nsorted_combined = sorted(combined, key=lambda x: (x[0] not in sel_model or x[0] not in sel_mi, x[1]))\n\n# Generate List3 with sorted items\nsel_com = [item for item, _ in sorted_combined]\nsel_com = sel_com[:10]\n\nprint(\"sel_com:\", sel_com)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:45:34.511008Z","iopub.execute_input":"2024-10-21T13:45:34.511463Z","iopub.status.idle":"2024-10-21T13:45:34.522362Z","shell.execute_reply.started":"2024-10-21T13:45:34.511423Z","shell.execute_reply":"2024-10-21T13:45:34.521113Z"},"trusted":true},"outputs":[{"name":"stdout","text":"sel_com: ['HE4', 'CA125', 'NEU', 'Age', 'CA72-4', 'ALB', 'Menopause', 'CA19-9', 'CEA', 'GLO']\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"X_train_com = X_train[sel_com]\ny_train_com = pd.Series(X_train.TYPE, index = X_train_com.index)\nX_test_com = X_test[sel_com]\ny_test_com = pd.Series(X_test.TYPE, index = X_test_com.index)","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:46:06.155072Z","iopub.execute_input":"2024-10-21T13:46:06.155529Z","iopub.status.idle":"2024-10-21T13:46:06.167169Z","shell.execute_reply.started":"2024-10-21T13:46:06.155486Z","shell.execute_reply":"2024-10-21T13:46:06.165306Z"},"trusted":true},"outputs":[],"execution_count":18},{"cell_type":"code","source":"# mRMR minimum redundancy maximum recall\n!pip install pymrmr","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T13:45:36.320553Z","iopub.execute_input":"2024-10-21T13:45:36.321103Z","iopub.status.idle":"2024-10-21T13:46:04.851758Z","shell.execute_reply.started":"2024-10-21T13:45:36.321059Z","shell.execute_reply":"2024-10-21T13:46:04.850210Z"}},"outputs":[{"name":"stdout","text":"Collecting pymrmr\n  Downloading pymrmr-0.1.11.tar.gz (69 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m69.5/69.5 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: numpy>=1.19.5 in /opt/conda/lib/python3.10/site-packages (from pymrmr) (1.26.4)\nBuilding wheels for collected packages: pymrmr\n  Building wheel for pymrmr (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for pymrmr: filename=pymrmr-0.1.11-cp310-cp310-linux_x86_64.whl size=115578 sha256=32b5dea000d7a9b5c2e720f6df01409529f34ea320310bb53e7709b7f7956054\n  Stored in directory: /root/.cache/pip/wheels/46/ae/55/4a2479c5f0de7eb363fe970cb18e4a750e03e4e63b1b5c2005\nSuccessfully built pymrmr\nInstalling collected packages: pymrmr\nSuccessfully installed pymrmr-0.1.11\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"import pymrmr\nsel_mrmr = pymrmr.mRMR(df, 'MIQ', 10)\nX_train_mrmr = X_train[sel_mrmr]\ny_train_mrmr = pd.Series(X_train.TYPE, index = X_train_mrmr.index)\nX_test_mrmr = X_test[sel_mrmr]\ny_test_mrmr = pd.Series(X_test.TYPE, index = X_test_mrmr.index)\n\nprint(sel_mrmr)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T13:46:09.930125Z","iopub.execute_input":"2024-10-21T13:46:09.930783Z","iopub.status.idle":"2024-10-21T13:46:15.852093Z","shell.execute_reply.started":"2024-10-21T13:46:09.930723Z","shell.execute_reply":"2024-10-21T13:46:15.850527Z"}},"outputs":[{"name":"stdout","text":"\n\n *** This program and the respective minimum Redundancy Maximum Relevance (mRMR) \n     algorithm were developed by Hanchuan Peng <hanchuan.peng@gmail.com>for\n     the paper \n     \"Feature selection based on mutual information: criteria of \n      max-dependency, max-relevance, and min-redundancy,\"\n      Hanchuan Peng, Fuhui Long, and Chris Ding, \n      IEEE Transactions on Pattern Analysis and Machine Intelligence,\n      Vol. 27, No. 8, pp.1226-1238, 2005.\n\n\n*** MaxRel features ***\nOrder \t Fea \t Name \t Score\n1 \t 49 \t UA \t 1.821\n2 \t 44 \t PLT \t 1.809\n3 \t 11 \t CA125 \t 1.709\n4 \t 26 \t HE4 \t 1.420\n5 \t 4 \t ALP \t 1.116\n6 \t 12 \t CA19-9 \t 1.080\n7 \t 27 \t HGB \t 0.975\n8 \t 2 \t Age \t 0.889\n9 \t 17 \t CREA \t 0.780\n10 \t 40 \t NEU \t 0.749\n\n*** mRMR features *** \nOrder \t Fea \t Name \t Score\n1 \t 49 \t UA \t 1.821\n2 \t 44 \t PLT \t 0.289\n3 \t 11 \t CA125 \t 0.281\n4 \t 26 \t HE4 \t 0.259\n5 \t 12 \t CA19-9 \t 0.239\n6 \t 4 \t ALP \t 0.240\n7 \t 27 \t HGB \t 0.240\n8 \t 2 \t Age \t 0.224\n9 \t 22 \t GGT \t 0.230\n10 \t 14 \t CEA \t 0.234\n['UA', 'PLT', 'CA125', 'HE4', 'CA19-9', 'ALP', 'HGB', 'Age', 'GGT', 'CEA']\n","output_type":"stream"}],"execution_count":19},{"cell_type":"markdown","source":"# Classification Scores","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, f1_score, precision_score \ndef classify_score(y_predict, y):\n    accuracy = accuracy_score(y_predict, y)        \n    # f1 = f1_score(y_predict, y)    \n    result = pd.DataFrame({\n        \"Metric\": [\"accuracy_score\"],\n        \"Results\":[accuracy]\n    })\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:46:18.777279Z","iopub.execute_input":"2024-10-21T13:46:18.777861Z","iopub.status.idle":"2024-10-21T13:46:18.790007Z","shell.execute_reply.started":"2024-10-21T13:46:18.777806Z","shell.execute_reply":"2024-10-21T13:46:18.788659Z"},"trusted":true},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"# Models","metadata":{}},{"cell_type":"markdown","source":"## SVM","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVC\nsvm_models = [SVC(kernel = 'linear'), SVC(kernel = 'rbf')]\ndef svmclf(X_train, y_train, X_test, y_test):\n    result = []\n    for i in svm_models:\n        clf = i.fit(X_train, y_train)\n        y_predict = clf.predict(X_test)\n        result.append({\"SVM_Model\": i, \"Scores\": classify_score(y_predict, y_test)})\n    return result","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:46:20.567367Z","iopub.execute_input":"2024-10-21T13:46:20.568476Z","iopub.status.idle":"2024-10-21T13:46:20.579590Z","shell.execute_reply.started":"2024-10-21T13:46:20.568426Z","shell.execute_reply":"2024-10-21T13:46:20.578349Z"},"trusted":true},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# Decision Tree","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\ndef dtreeclf(X_train, y_train, X_test, y_test):\n    clf = DecisionTreeClassifier(max_depth=5)\n    train_clf = clf.fit(X_train, y_train)\n    y_predict = train_clf.predict(X_test)\n    return {\"Model\": \"Decision_Tree\", \"Scores\": classify_score(y_predict, y_test)}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T13:46:21.775232Z","iopub.execute_input":"2024-10-21T13:46:21.775725Z","iopub.status.idle":"2024-10-21T13:46:21.786538Z","shell.execute_reply.started":"2024-10-21T13:46:21.775680Z","shell.execute_reply":"2024-10-21T13:46:21.785142Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"## Random Forest","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef best_clf_para_RF(X_train, y_train):\n    param_grid = [\n    {'n_estimators': [25, 50, 100], 'max_features': [10, 15, 20]}\n    ]\n    clf = RandomForestClassifier()\n    grid_search = GridSearchCV(clf, param_grid, cv = 5, scoring = 'accuracy', return_train_score = True)\n    grid_search.fit(X_train, y_train)\n    return grid_search.best_params_","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:30.473047Z","iopub.execute_input":"2024-10-21T13:47:30.473528Z","iopub.status.idle":"2024-10-21T13:47:30.481421Z","shell.execute_reply.started":"2024-10-21T13:47:30.473489Z","shell.execute_reply":"2024-10-21T13:47:30.480025Z"},"trusted":true},"outputs":[],"execution_count":30},{"cell_type":"code","source":"def Rforestclf(X_train, y_train, X_test, y_test):\n    best_params = best_clf_para_RF(X_train, y_train)\n    features = best_params[\"max_features\"]\n    estimators = best_params[\"n_estimators\"]\n    clf = RandomForestClassifier(max_features = features, n_estimators = estimators)\n    train_clf = clf.fit(X_train, y_train)\n    y_predict = train_clf.predict(X_test)\n    return {\"Model\": \"Random_Forest\", \"Scores\": classify_score(y_predict, y_test)}","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:35.045042Z","iopub.execute_input":"2024-10-21T13:47:35.045939Z","iopub.status.idle":"2024-10-21T13:47:35.054192Z","shell.execute_reply.started":"2024-10-21T13:47:35.045872Z","shell.execute_reply":"2024-10-21T13:47:35.052623Z"},"trusted":true},"outputs":[],"execution_count":31},{"cell_type":"markdown","source":"## XGBoost","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\ndef best_clf_para_XGB(X_train, y_train):\n    \n    param_grid = {\n            'n_estimators': [25, 50, 100],\n            'max_depth': [3, 4, 5, 6],\n            'learning_rate': [0.01, 0.1, 0.3],\n        }\n    clf = XGBClassifier()\n    grid_search = GridSearchCV(clf, param_grid, cv = 5, scoring = 'accuracy', return_train_score = True)\n    grid_search.fit(X_train, y_train)\n    return grid_search.best_params_","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:36.618314Z","iopub.execute_input":"2024-10-21T13:47:36.619189Z","iopub.status.idle":"2024-10-21T13:47:36.626669Z","shell.execute_reply.started":"2024-10-21T13:47:36.619139Z","shell.execute_reply":"2024-10-21T13:47:36.625360Z"},"trusted":true},"outputs":[],"execution_count":32},{"cell_type":"code","source":"def XGBclf(X_train, y_train, X_test, y_test):\n    best_params = best_clf_para_XGB(X_train, y_train)\n    depth = best_params[\"max_depth\"]\n    estimators = best_params[\"n_estimators\"]\n    learn_r = best_params[\"learning_rate\"]\n    clf = XGBClassifier(max_depth = depth, n_estimators = estimators, learning_rate = learn_r )\n    train_clf = clf.fit(X_train, y_train)\n    y_predict = train_clf.predict(X_test)\n    return {\"Model\": \"XGBoost\", \"Scores\": classify_score(y_predict, y_test)}","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:37.419265Z","iopub.execute_input":"2024-10-21T13:47:37.420611Z","iopub.status.idle":"2024-10-21T13:47:37.427628Z","shell.execute_reply.started":"2024-10-21T13:47:37.420542Z","shell.execute_reply":"2024-10-21T13:47:37.426386Z"},"trusted":true},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"# Training","metadata":{}},{"cell_type":"code","source":"print(\"SVM: \")\nprint(\"Feature_Selection: MI_Scores\")\nprint(svmclf(X_train_mi, y_train_mi, X_test_mi, y_test_mi))\nprint(\"Feature_Selection: Model\")\nprint(svmclf(X_train_model, y_train_model, X_test_model, y_test_model))\nprint(\"Feature_Selection: Combined\")\nprint(svmclf(X_train_com, y_train_com, X_test_com, y_test_com))\nprint(\"Feature Selection: mRMR\")\nprint(svmclf(X_train_mrmr, y_train_mrmr, X_test_mrmr, y_test_mrmr))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:39.465945Z","iopub.execute_input":"2024-10-21T13:47:39.466436Z","iopub.status.idle":"2024-10-21T13:47:39.562013Z","shell.execute_reply.started":"2024-10-21T13:47:39.466393Z","shell.execute_reply":"2024-10-21T13:47:39.560789Z"},"trusted":true},"outputs":[{"name":"stdout","text":"SVM: \nFeature_Selection: MI_Scores\n[{'SVM_Model': SVC(kernel='linear'), 'Scores':            Metric   Results\n0  accuracy_score  0.857143}, {'SVM_Model': SVC(), 'Scores':            Metric  Results\n0  accuracy_score      0.7}]\nFeature_Selection: Model\n[{'SVM_Model': SVC(kernel='linear'), 'Scores':            Metric   Results\n0  accuracy_score  0.842857}, {'SVM_Model': SVC(), 'Scores':            Metric   Results\n0  accuracy_score  0.814286}]\nFeature_Selection: Combined\n[{'SVM_Model': SVC(kernel='linear'), 'Scores':            Metric   Results\n0  accuracy_score  0.842857}, {'SVM_Model': SVC(), 'Scores':            Metric   Results\n0  accuracy_score  0.814286}]\nFeature Selection: mRMR\n[{'SVM_Model': SVC(kernel='linear'), 'Scores':            Metric   Results\n0  accuracy_score  0.857143}, {'SVM_Model': SVC(), 'Scores':            Metric  Results\n0  accuracy_score      0.8}]\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"print(\"Decision_Tree: \")\nprint(\"Feature_Selection: MI_Scores\")\nprint(dtreeclf(X_train_mi, y_train_mi, X_test_mi, y_test_mi))\nprint(\"Feature_Selection: Model\")\nprint(dtreeclf(X_train_model, y_train_model, X_test_model, y_test_model))\nprint(\"Feature_Selection: Combined\")\nprint(dtreeclf(X_train_com, y_train_com, X_test_com, y_test_com))\nprint(\"Feature Selection: mRMR\")\nprint(dtreeclf(X_train_mrmr, y_train_mrmr, X_test_mrmr, y_test_mrmr))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T13:47:41.335649Z","iopub.execute_input":"2024-10-21T13:47:41.336132Z","iopub.status.idle":"2024-10-21T13:47:41.378282Z","shell.execute_reply.started":"2024-10-21T13:47:41.336087Z","shell.execute_reply":"2024-10-21T13:47:41.376917Z"}},"outputs":[{"name":"stdout","text":"Decision_Tree: \nFeature_Selection: MI_Scores\n{'Model': 'Decision_Tree', 'Scores':            Metric  Results\n0  accuracy_score      0.8}\nFeature_Selection: Model\n{'Model': 'Decision_Tree', 'Scores':            Metric   Results\n0  accuracy_score  0.814286}\nFeature_Selection: Combined\n{'Model': 'Decision_Tree', 'Scores':            Metric   Results\n0  accuracy_score  0.828571}\nFeature Selection: mRMR\n{'Model': 'Decision_Tree', 'Scores':            Metric  Results\n0  accuracy_score      0.9}\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"print(\"Random_Forest: \")\nprint(\"Feature_Selection: MI_Scores\")\nprint(Rforestclf(X_train_mi, y_train_mi, X_test_mi, y_test_mi))\nprint(\"Feature_Selection: Model\")\nprint(Rforestclf(X_train_model, y_train_model, X_test_model, y_test_model))\nprint(\"Feature_Selection: Combined\")\nprint(Rforestclf(X_train_com, y_train_com, X_test_com, y_test_com))\nprint(\"Feature Selection: mRMR\")\nprint(Rforestclf(X_train_mrmr, y_train_mrmr, X_test_mrmr, y_test_mrmr))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:47:42.554985Z","iopub.execute_input":"2024-10-21T13:47:42.555415Z","iopub.status.idle":"2024-10-21T13:48:16.371239Z","shell.execute_reply.started":"2024-10-21T13:47:42.555376Z","shell.execute_reply":"2024-10-21T13:48:16.369886Z"},"trusted":true},"outputs":[{"name":"stdout","text":"Random_Forest: \nFeature_Selection: MI_Scores\n{'Model': 'Random_Forest', 'Scores':            Metric   Results\n0  accuracy_score  0.785714}\nFeature_Selection: Model\n{'Model': 'Random_Forest', 'Scores':            Metric   Results\n0  accuracy_score  0.828571}\nFeature_Selection: Combined\n{'Model': 'Random_Forest', 'Scores':            Metric   Results\n0  accuracy_score  0.828571}\nFeature Selection: mRMR\n{'Model': 'Random_Forest', 'Scores':            Metric   Results\n0  accuracy_score  0.871429}\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"print(\"XGBoost: \")\nprint(\"Feature_Selection: MI_Scores\")\nprint(XGBclf(X_train_mi, y_train_mi, X_test_mi, y_test_mi))\nprint(\"Feature_Selection: Model\")\nprint(XGBclf(X_train_model, y_train_model, X_test_model, y_test_model))\nprint(\"Feature_Selection: Combined\")\nprint(XGBclf(X_train_com, y_train_com, X_test_com, y_test_com))\nprint(\"Feature Selection: mRMR\")\nprint(XGBclf(X_train_mrmr, y_train_mrmr, X_test_mrmr, y_test_mrmr))","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:48:20.252207Z","iopub.execute_input":"2024-10-21T13:48:20.253588Z","iopub.status.idle":"2024-10-21T13:48:21.004910Z","shell.execute_reply.started":"2024-10-21T13:48:20.253517Z","shell.execute_reply":"2024-10-21T13:48:21.003250Z"},"trusted":true},"outputs":[{"name":"stdout","text":"XGBoost: \nFeature_Selection: MI_Scores\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[37], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mXGBoost: \u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFeature_Selection: MI_Scores\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mXGBclf\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train_mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train_mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_test_mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_test_mi\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFeature_Selection: Model\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      5\u001b[0m \u001b[38;5;28mprint\u001b[39m(XGBclf(X_train_model, y_train_model, X_test_model, y_test_model))\n","Cell \u001b[0;32mIn[33], line 2\u001b[0m, in \u001b[0;36mXGBclf\u001b[0;34m(X_train, y_train, X_test, y_test)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mXGBclf\u001b[39m(X_train, y_train, X_test, y_test):\n\u001b[0;32m----> 2\u001b[0m     best_params \u001b[38;5;241m=\u001b[39m \u001b[43mbest_clf_para_XGB\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m     depth \u001b[38;5;241m=\u001b[39m best_params[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m      4\u001b[0m     estimators \u001b[38;5;241m=\u001b[39m best_params[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_estimators\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","Cell \u001b[0;32mIn[32], line 12\u001b[0m, in \u001b[0;36mbest_clf_para_XGB\u001b[0;34m(X_train, y_train)\u001b[0m\n\u001b[1;32m     10\u001b[0m clf \u001b[38;5;241m=\u001b[39m XGBClassifier()\n\u001b[1;32m     11\u001b[0m grid_search \u001b[38;5;241m=\u001b[39m GridSearchCV(clf, param_grid, cv \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m, scoring \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m, return_train_score \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m---> 12\u001b[0m \u001b[43mgrid_search\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m grid_search\u001b[38;5;241m.\u001b[39mbest_params_\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:874\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    868\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    869\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    870\u001b[0m     )\n\u001b[1;32m    872\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 874\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    876\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    878\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:1388\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1386\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1387\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1388\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_search.py:851\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    844\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m!=\u001b[39m n_candidates \u001b[38;5;241m*\u001b[39m n_splits:\n\u001b[1;32m    845\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    846\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcv.split and cv.get_n_splits returned \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    847\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124minconsistent results. Expected \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    848\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msplits, got \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(n_splits, \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m n_candidates)\n\u001b[1;32m    849\u001b[0m     )\n\u001b[0;32m--> 851\u001b[0m \u001b[43m_warn_or_raise_about_fit_failures\u001b[49m\u001b[43m(\u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    853\u001b[0m \u001b[38;5;66;03m# For callable self.scoring, the return type is only know after\u001b[39;00m\n\u001b[1;32m    854\u001b[0m \u001b[38;5;66;03m# calling. If the return type is a dictionary, the error scores\u001b[39;00m\n\u001b[1;32m    855\u001b[0m \u001b[38;5;66;03m# can now be inserted with the correct key. The type checking\u001b[39;00m\n\u001b[1;32m    856\u001b[0m \u001b[38;5;66;03m# of out will be done in `_insert_error_scores`.\u001b[39;00m\n\u001b[1;32m    857\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mcallable\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mscoring):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py:367\u001b[0m, in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m num_failed_fits \u001b[38;5;241m==\u001b[39m num_fits:\n\u001b[1;32m    361\u001b[0m     all_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    362\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mAll the \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    363\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIt is very likely that your model is misconfigured.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    364\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou can try to debug the error by setting error_score=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    365\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    366\u001b[0m     )\n\u001b[0;32m--> 367\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(all_fits_failed_message)\n\u001b[1;32m    369\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    370\u001b[0m     some_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    371\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mnum_failed_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed out of a total of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    372\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe score on these train-test partitions for these parameters\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    376\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    377\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: \nAll the 180 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n180 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/xgboost/core.py\", line 730, in inner_f\n    return func(**kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py\", line 1471, in fit\n    raise ValueError(\nValueError: Invalid classes inferred from unique values of `y`.  Expected: [0 1], got [-1.  0.]\n"],"ename":"ValueError","evalue":"\nAll the 180 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n180 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/opt/conda/lib/python3.10/site-packages/xgboost/core.py\", line 730, in inner_f\n    return func(**kwargs)\n  File \"/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py\", line 1471, in fit\n    raise ValueError(\nValueError: Invalid classes inferred from unique values of `y`.  Expected: [0 1], got [-1.  0.]\n","output_type":"error"}],"execution_count":37},{"cell_type":"code","source":"corrmat = X_train_mi.copy()\ncorrmat = corrmat.corr()\nsns.heatmap(corrmat,annot=True,cmap='gray',fmt='.1f')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:48:30.338452Z","iopub.execute_input":"2024-10-21T13:48:30.338945Z","iopub.status.idle":"2024-10-21T13:48:31.257898Z","shell.execute_reply.started":"2024-10-21T13:48:30.338902Z","shell.execute_reply":"2024-10-21T13:48:31.256392Z"},"trusted":true},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"corrmat = X_train_model.copy()\ncorrmat = corrmat.corr()\nsns.heatmap(corrmat,annot=True,cmap='gray',fmt='.1f')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:48:32.485651Z","iopub.execute_input":"2024-10-21T13:48:32.486160Z","iopub.status.idle":"2024-10-21T13:48:33.223959Z","shell.execute_reply.started":"2024-10-21T13:48:32.486116Z","shell.execute_reply":"2024-10-21T13:48:33.222636Z"},"trusted":true},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"corrmat = X_train_com.copy()\ncorrmat = corrmat.corr()\nsns.heatmap(corrmat,annot=True,cmap='gray',fmt='.1f')","metadata":{"execution":{"iopub.status.busy":"2024-10-21T13:48:35.454247Z","iopub.execute_input":"2024-10-21T13:48:35.454754Z"},"trusted":true},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}}],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}