{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"### This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"animals = [\"Cat\", \"Dog\", \"Mouse\"]\nfor animal in animals:\n    print(animal)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:09:03.681364Z","iopub.execute_input":"2024-08-14T08:09:03.681759Z","iopub.status.idle":"2024-08-14T08:09:03.688797Z","shell.execute_reply.started":"2024-08-14T08:09:03.681730Z","shell.execute_reply":"2024-08-14T08:09:03.687592Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Cat\nDog\nMouse\n","output_type":"stream"}]},{"cell_type":"code","source":"x = [1,2 ,3,4]\ny = [x**2 for x in x]\nprint(y)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:09:59.987842Z","iopub.execute_input":"2024-08-14T08:09:59.988281Z","iopub.status.idle":"2024-08-14T08:09:59.995232Z","shell.execute_reply.started":"2024-08-14T08:09:59.988243Z","shell.execute_reply":"2024-08-14T08:09:59.993555Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"[1, 4, 9, 16]\n","output_type":"stream"}]},{"cell_type":"code","source":"animalF = {\n    \"Cat\": \"Soft\",\n    \"Dog\": \"Furry\",\n    \"Lion\": \"Danger\"\n}\n\n'Soft' in animalF\nanimalF.get('Cat')\nfor animal in animalF:\n    feature = animalF[animal]\n    print(\"%s is %s\"% (animal, feature))","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:21:21.123427Z","iopub.execute_input":"2024-08-14T08:21:21.123796Z","iopub.status.idle":"2024-08-14T08:21:21.131546Z","shell.execute_reply.started":"2024-08-14T08:21:21.123766Z","shell.execute_reply":"2024-08-14T08:21:21.130356Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Cat is Soft\nDog is Furry\nLion is Danger\n","output_type":"stream"}]},{"cell_type":"code","source":"nums = [1,2,3,4,5]\ndic = {x: x ** 2 for x in nums}\ndic","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:24:22.554994Z","iopub.execute_input":"2024-08-14T08:24:22.556275Z","iopub.status.idle":"2024-08-14T08:24:22.564149Z","shell.execute_reply.started":"2024-08-14T08:24:22.556236Z","shell.execute_reply":"2024-08-14T08:24:22.562788Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}"},"metadata":{}}]},{"cell_type":"code","source":"class greetings(object):\n    \n    def __init__(error,name):\n        error.name = name\n    \n    def greet(error):\n        print(error.name)\n        print(\"Hello, %s\"%(error.name))\n        \ng = greetings('Rishabh')\ng.greet()","metadata":{"execution":{"iopub.status.busy":"2024-08-14T08:31:00.868605Z","iopub.execute_input":"2024-08-14T08:31:00.869007Z","iopub.status.idle":"2024-08-14T08:31:00.876435Z","shell.execute_reply.started":"2024-08-14T08:31:00.868974Z","shell.execute_reply":"2024-08-14T08:31:00.875265Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Rishabh\nHello, Rishabh\n","output_type":"stream"}]},{"cell_type":"code","source":"class Student:\n    def __init__ (self, name, house):\n        self.name = name\n        self.house = house\n#     this getting and setting is done, so as programmer we don't screw up our own code    \n    @property \n#     this is getting the property \n    def name(self):\n        return self._name\n#     this is setting the property \n    @name.setter\n    def name(self, name):\n        if not name :\n            raise ValueError(\"Missing name\")\n        self._name = name\n        \n    @property\n    def house(self):\n            return self._house\n    @house.setter\n    def house(self, house):\n        if house not in [\"CSE\", \"ECE\", \"EE\", \"IT\"]:\n            raise ValueError(\"Invalid house\")\n        self._house = house\n        \n    def __str__(self):\n        return (f\"{self.name} from {self.house}\")\n#     class method lets you initiate the functionality, before taking class to world\n    @classmethod\n    def get(cls):\n        name = input(\"Name: \")\n        house = input(\"House: \")\n        return cls(name, house)\n    \n#  so what we have done is, all the functionality of student is in Student class, \n#  just .get functionality called first and rest is taken care of.\n\n\ndef main():\n    student = Student.get()\n    print(student)    \n\nif __name__ == \"__main__\":\n    main()","metadata":{"execution":{"iopub.status.busy":"2024-08-15T16:38:58.741949Z","iopub.execute_input":"2024-08-15T16:38:58.742341Z","iopub.status.idle":"2024-08-15T16:39:05.055946Z","shell.execute_reply.started":"2024-08-15T16:38:58.742308Z","shell.execute_reply":"2024-08-15T16:39:05.054827Z"},"trusted":true},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdin","text":"Name:  Rishabh\nHouse:  ECE\n"},{"name":"stdout","text":"Rishabh from ECE\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Class is a blueprint for pieces of data objects, it allows you to invent the datatype of your own choice-> OOPS,\nClasses have attributes\nWe created the class using \"Class\" keyword, when using it we are making object (objects from classes),\nObject -> instance, attribute -> instance variables, init method intializes the content of object","metadata":{}},{"cell_type":"code","source":"print(type(\"50\"))","metadata":{"execution":{"iopub.status.busy":"2024-08-15T16:06:19.945864Z","iopub.execute_input":"2024-08-15T16:06:19.946272Z","iopub.status.idle":"2024-08-15T16:06:19.952825Z","shell.execute_reply.started":"2024-08-15T16:06:19.946240Z","shell.execute_reply":"2024-08-15T16:06:19.951446Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'str'>\n","output_type":"stream"}]},{"cell_type":"code","source":"import random\nhouses = [\"ICE\"]\nclass Jee:\n    houses = [\"ECE\", \"CSE\", \"IT\", \"EE\"]\n    @classmethod\n    def sort(cls, name):\n        print(f\"{name} is in {random.choice(cls.houses)}\")\n    \nJee.sort(\"Rishabh\")","metadata":{"execution":{"iopub.status.busy":"2024-08-15T16:28:48.670575Z","iopub.execute_input":"2024-08-15T16:28:48.670969Z","iopub.status.idle":"2024-08-15T16:28:48.677345Z","shell.execute_reply.started":"2024-08-15T16:28:48.670937Z","shell.execute_reply":"2024-08-15T16:28:48.676228Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"Rishabh is in EE\n","output_type":"stream"}]},{"cell_type":"code","source":"class College:\n    def __init__(self, name):\n        self.name = name\n    ...\n    \nclass Faculty(College):\n    def __init__(self, name, subject):\n        super().__init__(name)\n        self.subject = subject\n    ...\n    \nclass Student(College):\n    def __init__ (self, name, house):\n        super().__init__(name)\n        self.house = house\n    ...\n    \ncollege = College(\"Rishabh\")\n\nfaculty = Faculty(\"HM Mittal\", \"Physics\")\n\nstudent = Student(\"Rishabh\", \"ECE\")\n        ","metadata":{"execution":{"iopub.status.busy":"2024-08-15T17:27:12.623368Z","iopub.execute_input":"2024-08-15T17:27:12.623758Z","iopub.status.idle":"2024-08-15T17:27:12.631498Z","shell.execute_reply.started":"2024-08-15T17:27:12.623727Z","shell.execute_reply":"2024-08-15T17:27:12.630064Z"},"trusted":true},"execution_count":55,"outputs":[]}]}