{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-16T18:14:49.281994Z","iopub.execute_input":"2024-09-16T18:14:49.282561Z","iopub.status.idle":"2024-09-16T18:14:49.290333Z","shell.execute_reply.started":"2024-09-16T18:14:49.282516Z","shell.execute_reply":"2024-09-16T18:14:49.288902Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/digit-recognizer/train.csv\")\nX = df.drop(\"label\", axis = 1)\ny = df.label","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:18:04.284013Z","iopub.execute_input":"2024-09-16T18:18:04.284461Z","iopub.status.idle":"2024-09-16T18:18:07.855892Z","shell.execute_reply.started":"2024-09-16T18:18:04.284426Z","shell.execute_reply":"2024-09-16T18:18:07.854803Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:19:26.833628Z","iopub.execute_input":"2024-09-16T18:19:26.834055Z","iopub.status.idle":"2024-09-16T18:19:27.115031Z","shell.execute_reply.started":"2024-09-16T18:19:26.834019Z","shell.execute_reply":"2024-09-16T18:19:27.113719Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"ex = X_train.iloc[0, :]\nprint(y_train[0])\nex_ex = ex.to_numpy().reshape(28, 28)\nplt.imshow(ex_ex , cmap = 'binary')\nplt.show()\ntype(y)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:20:17.715675Z","iopub.execute_input":"2024-09-16T18:20:17.716087Z","iopub.status.idle":"2024-09-16T18:20:17.937154Z","shell.execute_reply.started":"2024-09-16T18:20:17.716053Z","shell.execute_reply":"2024-09-16T18:20:17.936036Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"1\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}},{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"pandas.core.series.Series"},"metadata":{}}]},{"cell_type":"code","source":"# Binary Classification\ny_train_5 = (y_train == 5)\ny_test_5 = (y_test == 5)\nfrom sklearn.linear_model import SGDClassifier\nsgd_classifier = SGDClassifier(random_state = 42)\nsgd_classifier.fit(X_train, y_train_5)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:20:33.845378Z","iopub.execute_input":"2024-09-16T18:20:33.846018Z","iopub.status.idle":"2024-09-16T18:20:43.802628Z","shell.execute_reply.started":"2024-09-16T18:20:33.845972Z","shell.execute_reply":"2024-09-16T18:20:43.801110Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"SGDClassifier(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SGDClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label><div class=\"sk-toggleable__content\"><pre>SGDClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"# y_predict = sgd_classifier.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:21:16.025727Z","iopub.execute_input":"2024-09-16T18:21:16.026232Z","iopub.status.idle":"2024-09-16T18:21:16.075096Z","shell.execute_reply.started":"2024-09-16T18:21:16.026187Z","shell.execute_reply":"2024-09-16T18:21:16.073690Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"markdown","source":"# Performance Measures ","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\ncross_val_score(sgd_classifier, X_train, y_train_5, cv = 3, scoring = \"accuracy\")","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:25:15.287577Z","iopub.execute_input":"2024-09-16T18:25:15.288078Z","iopub.status.idle":"2024-09-16T18:25:32.395139Z","shell.execute_reply.started":"2024-09-16T18:25:15.288038Z","shell.execute_reply":"2024-09-16T18:25:32.393807Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"array([0.95830357, 0.96      , 0.94696429])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_predict\ny_train_predict = cross_val_predict(sgd_classifier, X_train, y_train_5, cv = 3)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:30:19.067203Z","iopub.execute_input":"2024-09-16T18:30:19.067732Z","iopub.status.idle":"2024-09-16T18:30:35.911934Z","shell.execute_reply.started":"2024-09-16T18:30:19.067693Z","shell.execute_reply":"2024-09-16T18:30:35.910290Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_train_5, y_train_predict)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:32:27.414759Z","iopub.execute_input":"2024-09-16T18:32:27.415833Z","iopub.status.idle":"2024-09-16T18:32:27.433642Z","shell.execute_reply.started":"2024-09-16T18:32:27.415781Z","shell.execute_reply":"2024-09-16T18:32:27.432284Z"},"trusted":true},"execution_count":50,"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"array([[29861,   703],\n       [  806,  2230]])"},"metadata":{}}]},{"cell_type":"code","source":"y_predict_joke = y_train_5\nconfusion_matrix(y_train_5, y_predict_joke)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:33:07.189375Z","iopub.execute_input":"2024-09-16T18:33:07.189831Z","iopub.status.idle":"2024-09-16T18:33:07.205898Z","shell.execute_reply.started":"2024-09-16T18:33:07.189788Z","shell.execute_reply":"2024-09-16T18:33:07.204750Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"array([[30564,     0],\n       [    0,  3036]])"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import precision_score, recall_score\nprint(precision_score(y_train_5, y_train_predict))\nprint(recall_score(y_train_5, y_train_predict))","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:37:34.423490Z","iopub.execute_input":"2024-09-16T18:37:34.424632Z","iopub.status.idle":"2024-09-16T18:37:34.462996Z","shell.execute_reply.started":"2024-09-16T18:37:34.424582Z","shell.execute_reply":"2024-09-16T18:37:34.461008Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"0.7603136720081828\n0.7345191040843215\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import f1_score\nf1_score(y_train_5, y_train_predict)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T18:42:22.501815Z","iopub.execute_input":"2024-09-16T18:42:22.502554Z","iopub.status.idle":"2024-09-16T18:42:22.526744Z","shell.execute_reply.started":"2024-09-16T18:42:22.502513Z","shell.execute_reply":"2024-09-16T18:42:22.525434Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"0.7471938348132017"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}